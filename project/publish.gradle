apply plugin: 'maven-publish'

ext.licenseFile = files("$rootDir/LICENSE.txt")

def pubVersion = '0.1.6'

def outputsFolder = file("$buildDir/outputs")

def versionFile = file("$outputsFolder/version.txt")

task outputVersions() {
    description = 'Prints the versions of wpilib to a file for use by the downstream packaging project'
    group = 'Build'
    outputs.files(versionFile)

    doFirst {
        buildDir.mkdir()
        outputsFolder.mkdir()
    }

    doLast {
        versionFile.write pubVersion
    }
}

task libraryBuild() {}

build.dependsOn outputVersions

task copyAllOutputs(type: Copy) {
    destinationDir file("$buildDir/allOutputs")
    from versionFile
    dependsOn outputVersions
}

copyAllOutputs.dependsOn outputVersions

ext.addTaskToCopyAllOutputs = { task ->
    copyAllOutputs.dependsOn task
    copyAllOutputs.inputs.file task.archiveFile
    copyAllOutputs.from task.archiveFile
}

def artifactGroupId = 'org.ironmaple'
def baseArtifactId = 'maplesim'
def driverZipBaseName = "_GROUP_org_ironmaple_ID_${baseArtifactId}-driver_CLS"
def zipBaseName = "_GROUP_org_ironmaple_ID_${baseArtifactId}-cpp_CLS"
def javaBaseName = "_GROUP_org_ironmaple_ID_${baseArtifactId}-java_CLS"

copy {
    from "maple-sim.json"
    into "$rootDir/../docs/vendordep"
    expand(version: "$pubVersion")
}

task cppHeadersZip(type: Zip) {
    destinationDirectory = outputsFolder
    archiveBaseName = zipBaseName
    archiveClassifier = "headers"

    from(licenseFile) {
        into '/'
    }

    from('src/main/native/include') {
        into '/'
    }
}

task cppSourceZip(type: Zip) {
    destinationDirectory = outputsFolder
    archiveBaseName = zipBaseName
    archiveClassifier = "sources"

    from(licenseFile) {
        into '/'
    }

    from('src/main/native/cpp') {
        into '/'
    }
}

task cppDriverHeadersZip(type: Zip) {
    destinationDirectory = outputsFolder
    archiveBaseName = driverZipBaseName
    archiveClassifier = "headers"

    from(licenseFile) {
        into '/'
    }

    from('src/main/driver/include') {
        into '/'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    javadoc.failOnError = false
    from javadoc.destinationDir
}

task outputJar(type: Jar, dependsOn: classes) {
    archiveBaseName = javaBaseName
    destinationDirectory = outputsFolder
    from sourceSets.main.output
}

task outputSourcesJar(type: Jar, dependsOn: classes) {
    archiveBaseName = javaBaseName
    destinationDirectory = outputsFolder
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task outputJavadocJar(type: Jar, dependsOn: javadoc) {
    archiveBaseName = javaBaseName
    destinationDirectory = outputsFolder
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives outputJar
    archives outputSourcesJar
    archives outputJavadocJar
}

libraryBuild.dependsOn build

def releasesRepoUrl = "$rootDir/../docs/vendordep/repos/releases"

publishing {
    repositories {
        maven {
            url = releasesRepoUrl
        }
    }
}

task cleanReleaseRepo(type: Delete) {
    delete releasesRepoUrl
}

// Define the task to move Javadocs to the desired directory
task moveJavadocsToDocsDirectory(type: Copy) {
    // Source directory for generated Javadocs
    from "$projectDir/javadoc"    // Adjust this path if your Javadocs output is different
    // Destination directory in your project where you want Javadocs to be copied
    into "$projectDir/docs/javadocs"
    // Ensure the destination directory is created if it doesnâ€™t exist
    doFirst {
        file("$projectDir/docs/javadocs").mkdirs()
    }
}

// Configure the `publish` task to depend on `moveJavadocsToDocsDirectory`
publish.dependsOn moveJavadocsToDocsDirectory

publish.dependsOn cleanReleaseRepo

publish.dependsOn outputJar
publish.dependsOn outputSourcesJar
publish.dependsOn outputJavadocJar
publish.dependsOn copyAllOutputs

copyAllOutputs.dependsOn outputJar
copyAllOutputs.dependsOn outputSourcesJar
copyAllOutputs.dependsOn outputJavadocJar

addTaskToCopyAllOutputs(outputJar)
addTaskToCopyAllOutputs(outputSourcesJar)
addTaskToCopyAllOutputs(outputJavadocJar)

model {
    publishing {
        def taskList = createComponentZipTasks($.components, ['Vendor'], zipBaseName, Zip, project, includeStandardZipFormat)

        def driverTaskList = createComponentZipTasks($.components, ['VendorDriver'], driverZipBaseName, Zip, project, includeStandardZipFormat)

        publications {
            java(MavenPublication) {
                artifact jar
                artifact sourcesJar
                artifact javadocJar

                artifactId = "${baseArtifactId}-java"
                groupId artifactGroupId
                version pubVersion
            }
        }
    }
}
